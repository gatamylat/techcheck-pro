/**
 * @module Config
 * @description –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã TechCheck Pro
 * @version 1.0.0
 */

export default class Config {
    constructor(app) {
        this.app = app;
        this.name = '_config';
        this.version = '1.0.0';
        
        // –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        this.config = {
            app: {
                name: 'TechCheck Pro',
                version: '1.0.0',
                description: '–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏',
                company: '–ú–∞—Å—Å–∏–≤–±—É—Ä–≥',
                debug: new URLSearchParams(window.location.search).has('debug')
            },
            
            // –†–µ–µ—Å—Ç—Ä –º–æ–¥—É–ª–µ–π
            modules: {
                system: ['_config', '_router', '_state'],
                functional: ['knowledge-base', 'checklist', 'wiki', 'stories'],
                future: ['statistics', 'llm-check']
            },
            
            // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª–µ–π
            moduleMeta: {
                'knowledge-base': {
                    title: '–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π',
                    icon: 'üìö',
                    description: '–ù–æ—Ä–º—ã –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ú–∞—Å—Å–∏–≤–±—É—Ä–≥',
                    navLabel: '–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π',
                    status: 'ready'
                },
                'checklist': {
                    title: '–ß–µ–∫-–ª–∏—Å—Ç—ã',
                    icon: '‚úì',
                    description: '–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏',
                    navLabel: '–ß–µ–∫-–ª–∏—Å—Ç—ã',
                    status: 'ready'
                },
                'wiki': {
                    title: 'Wiki',
                    icon: 'üìñ',
                    description: '–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –∫–æ–º–∞–Ω–¥—ã',
                    navLabel: 'Wiki',
                    status: 'beta'
                },
                'stories': {
                    title: 'Stories',
                    icon: 'üí¨',
                    description: '–ö–µ–π—Å—ã –∏ –ø—Ä–∏–º–µ—Ä—ã',
                    navLabel: 'Stories',
                    status: 'beta'
                },
                'statistics': {
                    title: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
                    icon: 'üìä',
                    description: '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫',
                    navLabel: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
                    status: 'soon'
                },
                'llm-check': {
                    title: 'AI –ü—Ä–æ–≤–µ—Ä–∫–∞',
                    icon: 'ü§ñ',
                    description: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å LLM',
                    navLabel: 'AI',
                    status: 'soon'
                }
            },
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            ui: {
                theme: 'light',
                language: 'ru',
                dateFormat: 'DD.MM.YYYY',
                animations: true,
                compactMode: false
            },
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
            storage: {
                prefix: 'techcheck_',
                version: 1,
                compress: false
            },
            
            // API endpoints (–¥–ª—è –±—É–¥—É—â–µ–≥–æ)
            api: {
                baseUrl: '',
                timeout: 30000,
                retries: 3
            }
        };
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
     */
    init() {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        this.loadSettings();
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É
        this.applyTheme();
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫
        this.setLanguage();
        
        this.app.log('Config initialized', 'system');
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
     */
    get(key, defaultValue = null) {
        const keys = key.split('.');
        let value = this.config;
        
        for (const k of keys) {
            if (value && typeof value === 'object' && k in value) {
                value = value[k];
            } else {
                return defaultValue;
            }
        }
        
        return value;
    }
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
     */
    set(key, value) {
        const keys = key.split('.');
        let target = this.config;
        
        for (let i = 0; i < keys.length - 1; i++) {
            const k = keys[i];
            if (!(k in target) || typeof target[k] !== 'object') {
                target[k] = {};
            }
            target = target[k];
        }
        
        target[keys[keys.length - 1]] = value;
        this.saveSettings();
        
        this.app.log(`Config updated: ${key} = ${value}`, 'system');
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
     */
    getAll() {
        return this.config;
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ localStorage
     */
    loadSettings() {
        try {
            const saved = localStorage.getItem('techcheck_config');
            if (saved) {
                const savedConfig = JSON.parse(saved);
                // –ú–µ—Ä–∂–∏–º —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
                this.config = this.deepMerge(this.config, savedConfig);
            }
        } catch (error) {
            this.app.log('Failed to load settings', 'error');
        }
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
     */
    saveSettings() {
        try {
            localStorage.setItem('techcheck_config', JSON.stringify(this.config));
        } catch (error) {
            this.app.log('Failed to save settings', 'error');
        }
    }
    
    /**
     * –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ç–µ–º—É
     */
    applyTheme() {
        const theme = this.get('ui.theme', 'light');
        document.documentElement.setAttribute('data-theme', theme);
    }
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —è–∑—ã–∫
     */
    setLanguage() {
        const lang = this.get('ui.language', 'ru');
        document.documentElement.setAttribute('lang', lang);
    }
    
    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–º—É
     */
    toggleTheme() {
        const currentTheme = this.get('ui.theme');
        const newTheme = currentTheme === 'light' ? 'dark' : 'light';
        this.set('ui.theme', newTheme);
        this.applyTheme();
    }
    
    /**
     * –ì–ª—É–±–æ–∫–æ–µ —Å–ª–∏—è–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤
     */
    deepMerge(target, source) {
        const output = Object.assign({}, target);
        
        if (this.isObject(target) && this.isObject(source)) {
            Object.keys(source).forEach(key => {
                if (this.isObject(source[key])) {
                    if (!(key in target)) {
                        Object.assign(output, { [key]: source[key] });
                    } else {
                        output[key] = this.deepMerge(target[key], source[key]);
                    }
                } else {
                    Object.assign(output, { [key]: source[key] });
                }
            });
        }
        
        return output;
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–±—ä–µ–∫—Ç
     */
    isObject(item) {
        return item && typeof item === 'object' && !Array.isArray(item);
    }
    
    /**
     * –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
     */
    export() {
        return JSON.stringify(this.config, null, 2);
    }
    
    /**
     * –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
     */
    import(configJson) {
        try {
            const newConfig = JSON.parse(configJson);
            this.config = this.deepMerge(this.config, newConfig);
            this.saveSettings();
            this.applyTheme();
            this.setLanguage();
            return true;
        } catch (error) {
            this.app.log('Failed to import config', 'error');
            return false;
        }
    }
    
    /**
     * –°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    reset() {
        localStorage.removeItem('techcheck_config');
        location.reload();
    }
}