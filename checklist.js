/**
 * @module Checklist
 * @description –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —á–µ–∫-–ª–∏—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
 * @version 1.0.0
 * @dependencies ['_state', '_router']
 */

import BaseModule from './BaseModule.js';

export default class Checklist extends BaseModule {
    constructor(app) {
        super(app);
        this.name = 'checklist';
        this.version = '1.0.0';
        this.dependencies = ['_state', '_router'];
        
        this.meta = {
            title: '–ß–µ–∫-–ª–∏—Å—Ç—ã',
            icon: '‚úì',
            description: '–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏',
            navLabel: '–ß–µ–∫-–ª–∏—Å—Ç—ã',
            status: 'ready'
        };
        
        this.currentChecklist = null;
        this.activeCheck = null;
        this.checkResults = {};
    }
    
    async loadData() {
        // –ß–µ–∫-–ª–∏—Å—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        this.data = {
            checklists: [
                {
                    id: 'sketch-approval',
                    title: '–≠—Å–∫–∏–∑—ã –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è',
                    icon: '‚úèÔ∏è',
                    description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —ç—Å–∫–∏–∑–æ–≤ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∑–∞–∫–∞–∑—á–∏–∫—É',
                    category: 'approval',
                    sections: [
                        {
                            title: '–û–±—â–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è',
                            id: 'general',
                            checks: [
                                { id: 'pdf-format', text: '–ß–µ—Ä—Ç–µ–∂–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF', critical: true },
                                { id: 'date', text: '–£–∫–∞–∑–∞–Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –≤—ã–ø—É—Å–∫–∞', critical: true },
                                { id: 'author', text: '–£–∫–∞–∑–∞–Ω–∞ —Ñ–∞–º–∏–ª–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è', critical: false },
                                { id: 'planfix-number', text: '–£–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä –∏–∑ –ü–ª–∞–Ω–§–∏–∫—Å', critical: true },
                                { id: 'page-numbers', text: '–ü—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –Ω–æ–º–µ—Ä–∞ –ª–∏—Å—Ç–æ–≤', critical: false }
                            ]
                        },
                        {
                            title: '–ü–µ—Ä–≤—ã–π –ª–∏—Å—Ç',
                            id: 'first-page',
                            checks: [
                                { id: 'iso-views', text: '–†–∞–∑–º–µ—â–µ–Ω—ã –∏–∑–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ –≤–∏–¥—ã –≤ —Ü–≤–µ—Ç–µ', critical: true },
                                { id: 'materials', text: '–û–ø–∏—Å–∞–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å —Ç–æ–ª—â–∏–Ω–∞–º–∏', critical: true },
                                { id: 'furniture', text: '–£–∫–∞–∑–∞–Ω–∞ –ª–∏—Ü–µ–≤–∞—è —Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞ –∏ –µ—ë —Ü–≤–µ—Ç', critical: false },
                                { id: 'lighting', text: '–û–ø–∏—Å–∞–Ω–∞ –ø–æ–¥—Å–≤–µ—Ç–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)', critical: false },
                                { id: 'tech', text: '–ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∞ —Ç–µ—Ö–Ω–∏–∫–∞ —Å –º–æ–¥–µ–ª—è–º–∏', critical: false }
                            ]
                        },
                        {
                            title: '–û—Å–Ω–æ–≤–Ω—ã–µ –≤–∏–¥—ã',
                            id: 'main-views',
                            checks: [
                                { id: 'front-view', text: '–ï—Å—Ç—å –≤–∏–¥ —Å–ø–µ—Ä–µ–¥–∏ —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏', critical: true },
                                { id: 'top-view', text: '–ï—Å—Ç—å –≤–∏–¥ —Å–≤–µ—Ä—Ö—É —Å –ø—Ä–∏–≤—è–∑–∫–∞–º–∏', critical: true },
                                { id: 'sections', text: '–ü–æ–∫–∞–∑–∞–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–µ—á–µ–Ω–∏—è', critical: true },
                                { id: 'nodes', text: '–í–∞–∂–Ω—ã–µ —É–∑–ª—ã –ø–æ–∫–∞–∑–∞–Ω—ã –∫—Ä—É–ø–Ω–æ', critical: false },
                                { id: 'gaps', text: '–û–±–æ–∑–Ω–∞—á–µ–Ω—ã –∑–∞–∑–æ—Ä—ã –º–µ–∂–¥—É –∏–∑–¥–µ–ª–∏–µ–º –∏ —Å—Ç–µ–Ω–∞–º–∏', critical: true }
                            ]
                        }
                    ]
                },
                {
                    id: 'production-drawings',
                    title: '–ß–µ—Ä—Ç–µ–∂–∏ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞',
                    icon: 'üìê',
                    description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è —Ü–µ—Ö–∞',
                    category: 'production',
                    sections: [
                        {
                            title: '–°–æ—Å—Ç–∞–≤ –∫–æ–º–ø–ª–µ–∫—Ç–∞',
                            id: 'package',
                            checks: [
                                { id: 'main-drawings', text: '–û—Å–Ω–æ–≤–Ω—ã–µ —á–µ—Ä—Ç–µ–∂–∏ —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏', critical: true },
                                { id: 'assembly-scheme', text: '–°—Ö–µ–º–∞ –º–æ–Ω—Ç–∞–∂–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º', critical: true },
                                { id: 'room-plan', text: '–ü–ª–∞–Ω –ø–æ–º–µ—â–µ–Ω–∏—è —Å –º–µ—Å—Ç–æ–º –º–æ–Ω—Ç–∞–∂–∞', critical: false },
                                { id: 'iso-assembly', text: '–ò–∑–æ–º–µ—Ç—Ä–∏—è —Å –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ–º —Å–µ–∫—Ü–∏–π', critical: true },
                                { id: 'sections-sheets', text: '–õ–∏—Å—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ–∫—Ü–∏–∏', critical: true }
                            ]
                        },
                        {
                            title: '–î–µ—Ç–∞–ª–∏—Ä–æ–≤–∫–∞ —Å–µ–∫—Ü–∏–π',
                            id: 'detailing',
                            checks: [
                                { id: 'section-dims', text: '–£–∫–∞–∑–∞–Ω—ã –≥–∞–±–∞—Ä–∏—Ç—ã –∫–∞–∂–¥–æ–π —Å–µ–∫—Ü–∏–∏', critical: true },
                                { id: 'parts-callouts', text: '–í—Å–µ –¥–µ—Ç–∞–ª–∏ –æ–±–æ–∑–Ω–∞—á–µ–Ω—ã –≤—ã–Ω–æ—Å–∫–∞–º–∏', critical: true },
                                { id: 'spec-table', text: '–¢–∞–±–ª–∏—Ü–∞ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞', critical: true },
                                { id: 'texture-direction', text: '–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç—É—Ä—ã —É–∫–∞–∑–∞–Ω–æ', critical: true },
                                { id: 'complex-parts', text: '–°–ª–æ–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –ø–æ–∫–∞–∑–∞–Ω—ã –æ—Ç–¥–µ–ª—å–Ω–æ', critical: false }
                            ]
                        }
                    ]
                },
                {
                    id: 'self-check',
                    title: '–õ–∏—Å—Ç —Å–∞–º–æ–ø—Ä–æ–≤–µ—Ä–∫–∏',
                    icon: 'üîç',
                    description: '–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–¥–∞—á–µ–π',
                    category: 'final',
                    sections: [
                        {
                            title: '–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –æ—Ç–¥–µ–ª–∫–∞',
                            id: 'materials',
                            checks: [
                                { id: 'ldsp-marking', text: '–£–∫–∞–∑–∞–Ω—ã –æ—Ç–¥–µ–ª–∫–∞, —Ü–≤–µ—Ç, –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ –õ–î–°–ü', critical: true },
                                { id: 'texture-direction', text: '–û–±–æ–∑–Ω–∞—á–µ–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç—É—Ä—ã', critical: true },
                                { id: 'edge-banding', text: '–í—Å–µ –∫—Ä–æ–º–∫–∏ –õ–î–°–ü –æ–±–æ–∑–Ω–∞—á–µ–Ω—ã', critical: false },
                                { id: 'visible-sides', text: '–í–∏–¥–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ñ–∞—Å–∞–¥–Ω–æ–π –æ—Ç–¥–µ–ª–∫–æ–π', critical: true }
                            ]
                        },
                        {
                            title: '–§—É—Ä–Ω–∏—Ç—É—Ä–∞ –∏ —Ç–µ—Ö–Ω–∏–∫–∞',
                            id: 'furniture-tech',
                            checks: [
                                { id: 'handles', text: '–†—É—á–∫–∏ –æ–±–æ–∑–Ω–∞—á–µ–Ω—ã (–º–æ–¥–µ–ª—å/—Å–∫—Ä–∏–Ω—à–æ—Ç)', critical: true },
                                { id: 'tech-models', text: '–¢–µ—Ö–Ω–∏–∫–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–∞ (–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ/–º–æ–¥–µ–ª—å)', critical: true },
                                { id: 'electrical', text: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —ç–ª–µ–∫—Ç—Ä–∏–∫–µ —É–∫–∞–∑–∞–Ω–∞', critical: true },
                                { id: 'sockets', text: '–£—á—Ç–µ–Ω–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ä–æ–∑–µ—Ç–æ–∫', critical: true },
                                { id: 'hidden-fasteners', text: '–í–∏–¥–∏–º—ã–π –∫—Ä–µ–ø–µ–∂ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç', critical: false }
                            ]
                        },
                        {
                            title: '–ú–æ–Ω—Ç–∞–∂ –∏ –≥–∞–±–∞—Ä–∏—Ç—ã',
                            id: 'mounting',
                            checks: [
                                { id: 'transport', text: '–ì–∞–±–∞—Ä–∏—Ç—ã –ø–æ–∑–≤–æ–ª—è—é—Ç –ø—Ä–æ–Ω–æ—Å –≤ –ø–æ–º–µ—â–µ–Ω–∏–µ', critical: true },
                                { id: 'wall-material', text: '–£—á—Ç–µ–Ω –º–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç–µ–Ω –¥–ª—è –∫—Ä–µ–ø–ª–µ–Ω–∏—è', critical: true },
                                { id: 'gaps', text: '–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–∑–æ—Ä—ã –æ–±–æ–∑–Ω–∞—á–µ–Ω—ã', critical: true },
                                { id: 'facade-gaps', text: '–ó–∞–∑–æ—Ä—ã –º–µ–∂–¥—É —Ñ–∞—Å–∞–¥–∞–º–∏ 3-4–º–º', critical: false },
                                { id: 'ceiling-lights', text: '–°–≤–µ—Ç–∏–ª—å–Ω–∏–∫–∏ –Ω–µ –º–µ—à–∞—é—Ç —Ñ–∞—Å–∞–¥–∞–º', critical: false }
                            ]
                        },
                        {
                            title: '–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è',
                            id: 'special',
                            checks: [
                                { id: 'high-facades', text: '–§–∞—Å–∞–¥—ã >1950–º–º —Å–æ —Å–∫—Ä—ã—Ç—ã–º–∏ –≤—ã–ø—Ä—è–º–∏—Ç–µ–ª—è–º–∏', critical: true },
                                { id: 'straighteners', text: '–ü–æ–ª–∫–∏ –∑–∞–≥–ª—É–±–ª–µ–Ω—ã –Ω–∞ 10–º–º –ø–æ–¥ –≤—ã–ø—Ä—è–º–∏—Ç–µ–ª–∏', critical: false },
                                { id: 'material-limits', text: '–ì–∞–±–∞—Ä–∏—Ç—ã –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—Ç —Ä–∞–∑–º–µ—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–∞', critical: true },
                                { id: 'opening-check', text: '–Ø—â–∏–∫–∏ –∏ —Ñ–∞—Å–∞–¥—ã —Å–≤–æ–±–æ–¥–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç—Å—è', critical: true },
                                { id: 'sections-connection', text: '–°–ø–æ—Å–æ–± —Å—Ç—è–∂–∫–∏ —Å–µ–∫—Ü–∏–π –æ–ø—Ä–µ–¥–µ–ª–µ–Ω', critical: false }
                            ]
                        }
                    ]
                },
                {
                    id: 'specification',
                    title: '–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è',
                    icon: 'üìã',
                    description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–µ—Ç–∞–ª–µ–π',
                    category: 'documents',
                    sections: [
                        {
                            title: '–§–æ—Ä–º–∞—Ç —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏',
                            id: 'format',
                            checks: [
                                { id: 'numbering', text: '–ù–æ–º–µ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –±–ª–æ–∫.–¥–µ—Ç–∞–ª—å', critical: true },
                                { id: 'names', text: '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã', critical: true },
                                { id: 'quantity', text: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∫–∞–∑–∞–Ω–æ –≤–µ—Ä–Ω–æ', critical: true },
                                { id: 'dimensions', text: '–ì–∞–±–∞—Ä–∏—Ç—ã –î—Ö–®—Ö–¢ –ø—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω—ã', critical: true },
                                { id: 'materials', text: '–ú–∞—Ç–µ—Ä–∏–∞–ª—ã —Å –æ–±–ª–∏—Ü–æ–≤–∫–æ–π —É–∫–∞–∑–∞–Ω—ã', critical: true }
                            ]
                        },
                        {
                            title: '–ü—Ä–∞–≤–∏–ª–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è',
                            id: 'rules',
                            checks: [
                                { id: 'texture-length', text: '–î–ª–∏–Ω–∞ —É–∫–∞–∑–∞–Ω–∞ –≤–¥–æ–ª—å —Ç–µ–∫—Å—Ç—É—Ä—ã', critical: true },
                                { id: 'composite-parts', text: '–°–æ—Å—Ç–∞–≤–Ω—ã–µ —Ñ–∞—Å–∞–¥—ã –Ω–µ —Ä–∞–∑–±–∏—Ç—ã', critical: false },
                                { id: 'removable-parts', text: '–°—ä–µ–º–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –æ—Ç–¥–µ–ª—å–Ω–æ', critical: false },
                                { id: 'notes', text: '–ü—Ä–∏–º–µ—á–∞–Ω–∏—è –≥–¥–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ', critical: false }
                            ]
                        }
                    ]
                },
                {
                    id: 'basis-files',
                    title: '–§–∞–π–ª—ã –ë–∞–∑–∏—Å',
                    icon: 'üíæ',
                    description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ë–∞–∑–∏—Å –ú–µ–±–µ–ª—å—â–∏–∫',
                    category: 'files',
                    sections: [
                        {
                            title: '–î–ª—è –∑–∞–∫–∞–∑–∞ –õ–î–°–ü',
                            id: 'ldsp-order',
                            checks: [
                                { id: 'only-ldsp', text: '–¢–æ–ª—å–∫–æ –¥–µ—Ç–∞–ª–∏ –õ–î–°–ü –∏ –•–î–§', critical: true },
                                { id: 'edge-banding', text: '–í—Å–µ —Ç–æ—Ä—Ü—ã —Å –∫—Ä–æ–º–∫–æ–π ABS', critical: true },
                                { id: 'thick-edge', text: '–î–ª—è —Ç–æ–ª—â–∏–Ω >16–º–º –∫—Ä–æ–º–∫–∞ 2–º–º', critical: false },
                                { id: 'blocks', text: '–°–µ–∫—Ü–∏–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã –≤ –±–ª–æ–∫–∏', critical: true },
                                { id: 'hierarchy', text: '–ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–∑–∏—Ü–∏–π', critical: false }
                            ]
                        },
                        {
                            title: '–î–ª—è –ß–ü–£',
                            id: 'cnc',
                            checks: [
                                { id: 'all-parts', text: '–í—Å–µ –¥–µ—Ç–∞–ª–∏ –∫—Ä–æ–º–µ –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã—Ö', critical: true },
                                { id: 'drilling', text: '–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø—Ä–∏—Å–∞–¥–∫–∏ –∏ —Ñ—Ä–µ–∑–µ—Ä–æ–≤–∫–∏', critical: true },
                                { id: 'numbering', text: '–ö–∞–∂–¥–æ–π –¥–µ—Ç–∞–ª–∏ –ø—Ä–∏—Å–≤–æ–µ–Ω –Ω–æ–º–µ—Ä', critical: true },
                                { id: 'step-files', text: '–°–ª–æ–∂–Ω—ã–µ —Ñ–æ—Ä–º—ã –≤ STEP', critical: false },
                                { id: 'model-check', text: '–í—ã–ø–æ–ª–Ω–µ–Ω "–ê–Ω–∞–ª–∏–∑ –º–æ–¥–µ–ª–∏"', critical: true }
                            ]
                        }
                    ]
                }
            ],
            
            templates: {
                report: {
                    title: '–û—Ç—á–µ—Ç –æ –ø—Ä–æ–≤–µ—Ä–∫–µ',
                    sections: ['summary', 'critical', 'warnings', 'passed']
                }
            }
        };
        
        const savedResults = this.getCache('results');
        if (savedResults) {
            this.checkResults = savedResults;
        }
        
        this.setCache(this.data);
    }
    
    renderContent() {
        if (this.activeCheck) {
            return this.renderActiveCheck();
        }
        
        if (this.currentChecklist) {
            return this.renderChecklist();
        }
        
        return this.renderMain();
    }
    
    renderMain() {
    const stats = this.getStatistics();
    const isMobile = window.innerWidth <= 767;
    
    return `
        <div class="checklists-container">
            ${isMobile ? '<h1 class="gradient-text mobile-page-title">–ß–µ–∫-–ª–∏—Å—Ç—ã</h1>' : ''}
                <div class="checklists-header">
                    <div class="stats-cards">
                        <div class="stat-card">
                            <div class="stat-value">${stats.total}</div>
                            <div class="stat-label">–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-value">${stats.completed}</div>
                            <div class="stat-label">–ó–∞–≤–µ—Ä—à–µ–Ω–æ</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-value">${stats.inProgress}</div>
                            <div class="stat-label">–í –ø—Ä–æ—Ü–µ—Å—Å–µ</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-value">${stats.successRate}%</div>
                            <div class="stat-label">–£—Å–ø–µ—à–Ω–æ—Å—Ç—å</div>
                        </div>
                    </div>
                </div>
                
                <div class="checklists-categories">
                    <h3>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–≤–µ—Ä–æ–∫</h3>
                    <div class="categories-tabs">
                        <button class="tab active" onclick="app.getModule('checklist').filterByCategory('all')">
                            –í—Å–µ
                        </button>
                        <button class="tab" onclick="app.getModule('checklist').filterByCategory('approval')">
                            –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ
                        </button>
                        <button class="tab" onclick="app.getModule('checklist').filterByCategory('production')">
                            –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ
                        </button>
                        <button class="tab" onclick="app.getModule('checklist').filterByCategory('documents')">
                            –î–æ–∫—É–º–µ–Ω—Ç—ã
                        </button>
                        <button class="tab" onclick="app.getModule('checklist').filterByCategory('final')">
                            –§–∏–Ω–∞–ª—å–Ω–∞—è
                        </button>
                    </div>
                </div>
                
                <div class="checklists-grid">
                    ${this.data.checklists.map(checklist => 
                        this.renderChecklistCard(checklist)
                    ).join('')}
                </div>
                
                ${this.renderRecentChecks()}
            </div>
        `;
    }
    
    renderChecklistCard(checklist) {
        const progress = this.getChecklistProgress(checklist.id);
        const statusClass = progress === 100 ? 'completed' : progress > 0 ? 'in-progress' : '';
        
        return `
            <div class="checklist-card ${statusClass}" 
                 onclick="app.getModule('checklist').openChecklist('${checklist.id}')">
                <div class="checklist-icon">${checklist.icon}</div>
                <h3>${checklist.title}</h3>
                <p>${checklist.description}</p>
                
                ${progress > 0 ? `
                    <div class="progress-bar">
                        <div class="progress-fill" style="width: ${progress}%"></div>
                    </div>
                    <span class="progress-text">${progress}% –≤—ã–ø–æ–ª–Ω–µ–Ω–æ</span>
                ` : `
                    <button class="start-btn">–ù–∞—á–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É ‚Üí</button>
                `}
            </div>
        `;
    }
    
    renderChecklist() {
        const checklist = this.data.checklists.find(c => c.id === this.currentChecklist);
        if (!checklist) return '<p>–ß–µ–∫-–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</p>';
        
        const results = this.checkResults[checklist.id] || {};
        const progress = this.getChecklistProgress(checklist.id);
        
        return `
            <div class="checklist-page">
                <div class="breadcrumbs">
                    <span onclick="app.getModule('checklist').goHome()">–ß–µ–∫-–ª–∏—Å—Ç—ã</span>
                    <span>‚Üí</span>
                    <span>${checklist.title}</span>
                </div>
                
                <div class="checklist-header">
                    <h1>${checklist.icon} ${checklist.title}</h1>
                    <p>${checklist.description}</p>
                    
                    <div class="progress-summary">
                        <div class="progress-bar large">
                            <div class="progress-fill" style="width: ${progress}%"></div>
                        </div>
                        <span class="progress-text">${this.getCompletedCount(checklist.id)} –∏–∑ ${this.getTotalCount(checklist.id)} –ø—É–Ω–∫—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ</span>
                    </div>
                </div>
                
                <div class="checklist-sections">
                    ${checklist.sections.map(section => 
                        this.renderSection(section, checklist.id)
                    ).join('')}
                </div>
                
                <div class="checklist-actions">
                    <button class="btn btn-secondary" onclick="app.getModule('checklist').saveProgress()">
                        üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
                    </button>
                    <button class="btn btn-primary" onclick="app.getModule('checklist').generateReport('${checklist.id}')">
                        üìÑ –°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç
                    </button>
                    ${progress === 100 ? `
                        <button class="btn btn-success" onclick="app.getModule('checklist').completeCheck('${checklist.id}')">
                            ‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É
                        </button>
                    ` : ''}
                </div>
            </div>
        `;
    }
    
    renderSection(section, checklistId) {
        const results = this.checkResults[checklistId] || {};
        const sectionResults = results[section.id] || {};
        const completed = section.checks.filter(c => sectionResults[c.id]).length;
        
        return `
            <div class="checklist-section">
                <h3>${section.title} <span class="section-progress">${completed}/${section.checks.length}</span></h3>
                <div class="checks-list">
                    ${section.checks.map(check => `
                        <label class="check-item ${check.critical ? 'critical' : ''} ${sectionResults[check.id] ? 'checked' : ''}">
                            <input type="checkbox" 
                                   ${sectionResults[check.id] ? 'checked' : ''}
                                   onchange="app.getModule('checklist').toggleCheck('${checklistId}', '${section.id}', '${check.id}')">
                            <span class="check-text">${check.text}</span>
                            ${check.critical ? '<span class="critical-badge">–ö—Ä–∏—Ç–∏—á–Ω–æ</span>' : ''}
                        </label>
                    `).join('')}
                </div>
            </div>
        `;
    }
    
    renderRecentChecks() {
        const recent = this.getRecentChecks();
        if (recent.length === 0) return '';
        
        return `
            <div class="recent-checks">
                <h3>–ù–µ–¥–∞–≤–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏</h3>
                <div class="recent-list">
                    ${recent.map(check => `
                        <div class="recent-item" onclick="app.getModule('checklist').loadCheck('${check.id}')">
                            <div class="recent-icon">${check.icon}</div>
                            <div class="recent-info">
                                <div class="recent-title">${check.title}</div>
                                <div class="recent-date">${check.date}</div>
                            </div>
                            <div class="recent-progress">${check.progress}%</div>
                        </div>
                    `).join('')}
                </div>
            </div>
        `;
    }
    
    getPublicMethods() {
        return {
            openChecklist: (id) => this.openChecklist(id),
            toggleCheck: (checklistId, sectionId, checkId) => this.toggleCheck(checklistId, sectionId, checkId),
            saveProgress: () => this.saveProgress(),
            generateReport: (id) => this.generateReport(id),
            completeCheck: (id) => this.completeCheck(id),
            goHome: () => this.goHome(),
            filterByCategory: (category) => this.filterByCategory(category),
            loadCheck: (id) => this.loadCheck(id)
        };
    }
    
    openChecklist(id) {
        this.currentChecklist = id;
        this.app.router.navigate(`/checklist/${id}`);
        this.render();
    }
    
    toggleCheck(checklistId, sectionId, checkId) {
        if (!this.checkResults[checklistId]) {
            this.checkResults[checklistId] = {};
        }
        if (!this.checkResults[checklistId][sectionId]) {
            this.checkResults[checklistId][sectionId] = {};
        }
        
        this.checkResults[checklistId][sectionId][checkId] = 
            !this.checkResults[checklistId][sectionId][checkId];
        
        this.saveProgress();
        this.render();
    }
    
    saveProgress() {
        this.setCache(this.checkResults, 'results');
        this.log('Progress saved');
        this.showNotification('–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
    }
    
    generateReport(checklistId) {
        const checklist = this.data.checklists.find(c => c.id === checklistId);
        const results = this.checkResults[checklistId] || {};
        
        this.log(`Generating report for ${checklistId}`);
        this.showNotification('–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω');
    }
    
    completeCheck(checklistId) {
        this.log(`Completing check ${checklistId}`);
        this.showNotification('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        this.goHome();
    }
    
    getChecklistProgress(checklistId) {
        const checklist = this.data.checklists.find(c => c.id === checklistId);
        if (!checklist) return 0;
        
        const results = this.checkResults[checklistId] || {};
        let completed = 0;
        let total = 0;
        
        checklist.sections.forEach(section => {
            const sectionResults = results[section.id] || {};
            completed += section.checks.filter(c => sectionResults[c.id]).length;
            total += section.checks.length;
        });
        
        return total > 0 ? Math.round((completed / total) * 100) : 0;
    }
    
    getCompletedCount(checklistId) {
        const checklist = this.data.checklists.find(c => c.id === checklistId);
        if (!checklist) return 0;
        
        const results = this.checkResults[checklistId] || {};
        let completed = 0;
        
        checklist.sections.forEach(section => {
            const sectionResults = results[section.id] || {};
            completed += section.checks.filter(c => sectionResults[c.id]).length;
        });
        
        return completed;
    }
    
    getTotalCount(checklistId) {
        const checklist = this.data.checklists.find(c => c.id === checklistId);
        if (!checklist) return 0;
        
        let total = 0;
        checklist.sections.forEach(section => {
            total += section.checks.length;
        });
        
        return total;
    }
    
    getStatistics() {
        const total = this.data.checklists.length;
        const completed = Object.keys(this.checkResults).filter(id => 
            this.getChecklistProgress(id) === 100
        ).length;
        const inProgress = Object.keys(this.checkResults).filter(id => 
            this.getChecklistProgress(id) > 0 && this.getChecklistProgress(id) < 100
        ).length;
        
        return {
            total,
            completed,
            inProgress,
            successRate: total > 0 ? Math.round((completed / total) * 100) : 0
        };
    }
    
    getRecentChecks() {
        return [];
    }
    
    goHome() {
        this.currentChecklist = null;
        this.activeCheck = null;
        this.app.router.navigate('/checklist');
        this.render();
    }
    
    filterByCategory(category) {
        this.log(`Filtering by category: ${category}`);
        this.render();
    }
    
    loadCheck(id) {
        this.log(`Loading check: ${id}`);
    }
    
    showNotification(message) {
        const notification = document.createElement('div');
        notification.className = 'notification';
        notification.textContent = message;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.style.opacity = '0';
            setTimeout(() => notification.remove(), 300);
        }, 3000);
    }
   
}
