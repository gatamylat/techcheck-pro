/**
 * @module Stories
 * @description Stories –∫–∞—Ä—É—Å–µ–ª—å - –†–ê–î–ò–ö–ê–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï
 * @version 4.0.0 - INLINE STYLES FIX
 */

import BaseModule from './BaseModule.js';

export default class Stories extends BaseModule {
    constructor(app) {
        super(app);
        this.name = 'stories';
        this.version = '4.0.0';
        this.dependencies = ['_state', '_router'];
        
        this.meta = {
            title: 'Stories',
            icon: 'üí¨',
            description: '–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ Stories',
            navLabel: 'Stories',
            status: 'ready'
        };
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ä—É—Å–µ–ª–∏
        this.currentSlide = 0;
        this.totalSlides = 5;
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–Ω–µ–ª–∏
        this.isExpanded = false;
        this.isDragging = false;
        this.startY = 0;
        this.currentTop = 380;
        
        // DOM —ç–ª–µ–º–µ–Ω—Ç—ã
        this.elements = {};
    }
    
    async init() {
        await super.init();
        this.initDOMElements();
    }
    
    initDOMElements() {
        this.elements = {
            homeContainer: document.getElementById('home-container'),
            desktopHomeContainer: document.getElementById('desktop-home-container'),
            mainHeader: document.getElementById('main-header'),
            mainContent: document.getElementById('content'),
            mainFooter: document.getElementById('main-footer'),
            homeHeader: document.getElementById('homeHeader'),
            storiesHero: document.getElementById('storiesHero'),
            storiesCarousel: document.getElementById('storiesCarousel'),
            carouselIndicators: document.getElementById('carouselIndicators'),
            mainContentPanel: document.getElementById('mainContent'),
            homeModules: document.getElementById('homeModules'),
            searchFab: document.getElementById('searchFab')
        };
    }
    
    async loadData() {
        this.data = {
            slides: [
                {
                    id: 1,
                    title: 'TechCheck Pro',
                    subtitle: '–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏',
                    background: 'linear-gradient(135deg, #FF006E 0%, #8338EC 20%, #3A86FF 40%, #06FFB4 60%, #FFBE0B 80%, #FB5607 100%)'
                },
                {
                    id: 2,
                    title: '–ù–æ–≤–æ—Å—Ç–∏',
                    subtitle: '–û–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã',
                    background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)'
                },
                {
                    id: 3,
                    title: '–°–æ–≤–µ—Ç –¥–Ω—è',
                    subtitle: '–ü–æ–ª–µ–∑–Ω—ã–µ –ª–∞–π—Ñ—Ö–∞–∫–∏',
                    background: 'linear-gradient(135deg, #f093fb 0%, #f5576c 100%)'
                },
                {
                    id: 4,
                    title: '127',
                    subtitle: '–ü—Ä–æ–≤–µ—Ä–æ–∫ –∑–∞ –Ω–µ–¥–µ–ª—é',
                    background: 'linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)'
                },
                {
                    id: 5,
                    title: '–ö–æ–º–∞–Ω–¥–∞',
                    subtitle: '–õ—É—á—à–∏–µ –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–µ',
                    background: 'linear-gradient(135deg, #43e97b 0%, #38f9d7 100%)'
                }
            ]
        };
        
        this.totalSlides = this.data.slides.length;
    }
    
    initHomePage() {
        this.initDOMElements();
        
        const isMobile = window.innerWidth < 768;
        
        if (isMobile) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–±–∏–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é
            if (this.elements.desktopHomeContainer) {
                this.elements.desktopHomeContainer.classList.add('hidden');
            }
            if (this.elements.homeContainer) {
                this.elements.homeContainer.classList.remove('hidden');
            }
            
            // –†–µ–Ω–¥–µ—Ä–∏–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            this.renderStoriesSlides();
            this.renderIndicators();
            this.renderHomeModules();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
            setTimeout(() => {
                this.initCarouselEvents();
                this.initPanelDragging();
                this.initSearchButton();
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —Å–ª–∞–π–¥
                this.goToSlide(0);
            }, 100);
            
            this.log('Mobile home initialized', 'success');
        } else {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Å–∫—Ç–æ–ø–Ω—É—é –≤–µ—Ä—Å–∏—é
            if (this.elements.homeContainer) {
                this.elements.homeContainer.classList.add('hidden');
            }
            if (this.elements.desktopHomeContainer) {
                this.elements.desktopHomeContainer.classList.remove('hidden');
            }
            
            this.renderDesktopHome();
            this.log('Desktop home initialized', 'success');
        }
    }
    
    renderStoriesSlides() {
        if (!this.elements.storiesCarousel) return;
        
        // –†–ê–î–ò–ö–ê–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï: inline —Å—Ç–∏–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–∞–π–¥–∞
        const slidesHTML = this.data.slides.map((slide, index) => `
            <div class="story-slide" 
                 data-slide="${index}"
                 style="
                    min-width: 100%;
                    height: 100%;
                    display: flex;
                    flex-direction: column;
                    align-items: center;
                    justify-content: center;
                    color: white;
                    position: relative;
                    padding: 20px;
                    cursor: pointer;
                    background: ${slide.background};
                    background-size: 400% 400%;
                 "
                 onclick="app.getModule('stories').openStory(${index})">
                <h1 class="story-title" style="
                    font-size: 3.5rem;
                    font-weight: 900;
                    letter-spacing: -0.02em;
                    margin-bottom: 0.5rem;
                    text-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
                    text-align: center;
                    color: white;
                ">${slide.title}</h1>
                <p class="story-subtitle" style="
                    font-size: 1.125rem;
                    opacity: 0.95;
                    font-weight: 300;
                    text-align: center;
                    color: white;
                ">${slide.subtitle}</p>
            </div>
        `).join('');
        
        this.elements.storiesCarousel.innerHTML = slidesHTML;
        this.elements.storiesCarousel.style.cssText = `
            display: flex;
            height: 100%;
            transition: transform 0.5s cubic-bezier(0.4, 0, 0.2, 1);
            transform: translateX(0);
        `;
        
        this.log(`Rendered ${this.totalSlides} slides with inline styles`, 'success');
    }
    
    renderIndicators() {
        if (!this.elements.carouselIndicators) return;
        
        this.elements.carouselIndicators.innerHTML = this.data.slides.map((_, index) => `
            <button class="carousel-indicator ${index === 0 ? 'active' : ''}" 
                    onclick="app.getModule('stories').goToSlide(${index})"></button>
        `).join('');
    }
    
    renderHomeModules() {
        if (!this.elements.homeModules) return;
        
        const modules = [
            { id: 'knowledge-base', icon: 'üìö', title: '–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π', desc: '–ì–û–°–¢ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã' },
            { id: 'checklist', icon: '‚úì', title: '–ß–µ–∫-–ª–∏—Å—Ç—ã', desc: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤' },
            { id: 'documents', icon: 'üìã', title: '–î–æ–∫—É–º–µ–Ω—Ç—ã', desc: '–°–æ—Å—Ç–∞–≤ –ö–ë' },
            { id: 'wiki', icon: 'üìñ', title: 'Wiki', desc: '–ë–∞–∑–∞ –∫–æ–º–∞–Ω–¥—ã' }
        ];
        
        this.elements.homeModules.innerHTML = `
            <div class="home-modules">
                <div class="grid grid-2">
                    ${modules.map(module => `
                        <div class="module-card" onclick="window.location.hash = '/${module.id}'">
                            <div class="module-header">
                                <div class="module-icon">${module.icon}</div>
                                <div class="module-info">
                                    <h3>${module.title}</h3>
                                    <p>${module.desc}</p>
                                </div>
                            </div>
                        </div>
                    `).join('')}
                </div>
            </div>
            
            <section class="future-section">
                <h2>–°–∫–æ—Ä–æ</h2>
                <div class="future-modules">
                    <div class="future-card">
                        <span class="future-badge">Q2 2025</span>
                        <div class="future-icon">üìä</div>
                        <div class="future-title">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</div>
                        <div class="future-desc">–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫</div>
                    </div>
                    <div class="future-card">
                        <span class="future-badge">Q3 2025</span>
                        <div class="future-icon">ü§ñ</div>
                        <div class="future-title">AI –ü—Ä–æ–≤–µ—Ä–∫–∞</div>
                        <div class="future-desc">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑</div>
                    </div>
                </div>
            </section>
        `;
    }
    
    renderDesktopHome() {
        if (!this.elements.desktopHomeContainer) return;
        
        this.elements.desktopHomeContainer.innerHTML = `
            <div class="desktop-hero">
                <div class="desktop-hero-content">
                    <h1 class="gradient-text">–ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –±—ã—Å—Ç—Ä–æ –∏ —Ç–æ—á–Ω–æ</h1>
                    <p class="text-secondary mb-3">–°—Ç–∞–Ω–¥–∞—Ä—Ç—ã –ú–∞—Å—Å–∏–≤–±—É—Ä–≥ ‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —á–µ–∫-–ª–∏—Å—Ç—ã ‚Ä¢ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π</p>
                    <div class="hero-actions">
                        <button class="btn btn-primary" onclick="window.location.hash = '/checklist'">
                            üöÄ –ù–∞—á–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É
                        </button>
                        <button class="btn btn-secondary" onclick="window.location.hash = '/knowledge-base'">
                            üìñ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π
                        </button>
                    </div>
                </div>
            </div>
            
            <div class="desktop-modules-grid">
                <div class="module-card" onclick="window.location.hash = '/documents'">
                    <span class="module-status status-ready">–ì–æ—Ç–æ–≤–æ</span>
                    <div class="module-header">
                        <div class="module-icon">üìã</div>
                        <div class="module-info">
                            <h3>–°–æ—Å—Ç–∞–≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏</h3>
                            <p>7 —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</p>
                        </div>
                    </div>
                </div>
                
                <div class="module-card" onclick="window.location.hash = '/knowledge-base'">
                    <span class="module-status status-ready">–ì–æ—Ç–æ–≤–æ</span>
                    <div class="module-header">
                        <div class="module-icon">üìö</div>
                        <div class="module-info">
                            <h3>–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π</h3>
                            <p>–ì–û–°–¢ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã</p>
                        </div>
                    </div>
                </div>
                
                <div class="module-card" onclick="window.location.hash = '/checklist'">
                    <span class="module-status status-ready">–ì–æ—Ç–æ–≤–æ</span>
                    <div class="module-header">
                        <div class="module-icon">‚úì</div>
                        <div class="module-info">
                            <h3>–ß–µ–∫-–ª–∏—Å—Ç—ã</h3>
                            <p>–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</p>
                        </div>
                    </div>
                </div>
            </div>
        `;
    }
    
    initCarouselEvents() {
        if (!this.elements.storiesHero) return;
        
        let startX = 0;
        let startY = 0;
        
        // Touch —Å–æ–±—ã—Ç–∏—è
        this.elements.storiesHero.addEventListener('touchstart', (e) => {
            startX = e.touches[0].clientX;
            startY = e.touches[0].clientY;
        }, { passive: true });
        
        this.elements.storiesHero.addEventListener('touchend', (e) => {
            const endX = e.changedTouches[0].clientX;
            const endY = e.changedTouches[0].clientY;
            
            const diffX = startX - endX;
            const diffY = Math.abs(startY - endY);
            
            // –¢–æ–ª—å–∫–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ —Å–≤–∞–π–ø—ã
            if (Math.abs(diffX) > diffY && Math.abs(diffX) > 30) {
                if (diffX > 0) {
                    this.nextSlide();
                } else {
                    this.prevSlide();
                }
            }
        }, { passive: true });
        
        this.log('Carousel events initialized', 'info');
    }
    
    goToSlide(index) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–Ω–∏—Ü
        if (index < 0) index = this.totalSlides - 1;
        if (index >= this.totalSlides) index = 0;
        
        this.currentSlide = index;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        if (!this.elements.storiesCarousel) {
            this.elements.storiesCarousel = document.getElementById('storiesCarousel');
            if (!this.elements.storiesCarousel) {
                this.log('Carousel not found!', 'error');
                return;
            }
        }
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é
        const translateX = -index * 100;
        this.elements.storiesCarousel.style.transform = `translateX(${translateX}%)`;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        const indicators = document.querySelectorAll('.carousel-indicator');
        indicators.forEach((ind, i) => {
            ind.classList.toggle('active', i === index);
        });
        
        this.log(`Slide ${index + 1}/${this.totalSlides}`, 'info');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–ª–∞–π–¥ –≤–∏–¥–∏–º—ã–π
        const currentSlide = this.elements.storiesCarousel.querySelector(`[data-slide="${index}"]`);
        if (currentSlide) {
            const bg = currentSlide.style.background;
            this.log(`Current slide background: ${bg.substring(0, 50)}...`, 'info');
        }
    }
    
    nextSlide() {
        this.goToSlide(this.currentSlide + 1);
    }
    
    prevSlide() {
        this.goToSlide(this.currentSlide - 1);
    }
    
    initPanelDragging() {
        const panel = this.elements.mainContentPanel;
        if (!panel) return;
        
        let startY = 0;
        let startTop = 380;
        
        panel.addEventListener('touchstart', (e) => {
            if (e.target.closest('.module-card, button')) return;
            
            this.isDragging = true;
            startY = e.touches[0].clientY;
            startTop = this.currentTop;
            panel.classList.add('is-dragging');
        }, { passive: false });
        
        document.addEventListener('touchmove', (e) => {
            if (!this.isDragging) return;
            
            e.preventDefault();
            const deltaY = e.touches[0].clientY - startY;
            let newTop = startTop + deltaY;
            
            newTop = Math.max(40, Math.min(380, newTop));
            panel.style.top = newTop + 'px';
            this.currentTop = newTop;
        }, { passive: false });
        
        document.addEventListener('touchend', () => {
            if (!this.isDragging) return;
            
            this.isDragging = false;
            panel.classList.remove('is-dragging');
            
            if (this.currentTop < 230) {
                this.expandPanel();
            } else {
                this.collapsePanel();
            }
        });
        
        // –ö–ª–∏–∫ –Ω–∞ —Ö–µ–¥–µ—Ä
        if (this.elements.homeHeader) {
            this.elements.homeHeader.addEventListener('click', () => {
                this.collapsePanel();
            });
        }
    }
    
    expandPanel() {
        if (!this.elements.mainContentPanel) return;
        
        this.isExpanded = true;
        this.currentTop = 40;
        this.elements.mainContentPanel.style.top = '40px';
        this.elements.mainContentPanel.classList.add('is-expanded');
        
        if (this.elements.storiesHero) {
            this.elements.storiesHero.classList.add('is-hidden');
        }
        if (this.elements.homeHeader) {
            this.elements.homeHeader.classList.add('is-visible');
        }
    }
    
    collapsePanel() {
        if (!this.elements.mainContentPanel) return;
        
        this.isExpanded = false;
        this.currentTop = 380;
        this.elements.mainContentPanel.style.top = '380px';
        this.elements.mainContentPanel.classList.remove('is-expanded');
        
        if (this.elements.storiesHero) {
            this.elements.storiesHero.classList.remove('is-hidden');
        }
        if (this.elements.homeHeader) {
            this.elements.homeHeader.classList.remove('is-visible');
        }
    }
    
    initSearchButton() {
        if (!this.elements.searchFab) return;
        
        this.elements.searchFab.addEventListener('click', () => {
            alert('–§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏');
        });
    }
    
    openStory(index) {
        const slide = this.data.slides[index];
        this.log(`Opening story: ${slide.title}`);
        alert(`Story: ${slide.title}\n${slide.subtitle}`);
    }
    
    getPublicMethods() {
        return {
            goToSlide: (index) => this.goToSlide(index),
            nextSlide: () => this.nextSlide(),
            prevSlide: () => this.prevSlide(),
            openStory: (index) => this.openStory(index),
            initHomePage: () => this.initHomePage(),
            expandPanel: () => this.expandPanel(),
            collapsePanel: () => this.collapsePanel()
        };
    }
}
