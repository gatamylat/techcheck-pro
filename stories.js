/**
 * @module Stories
 * @description Stories –∫–∞—Ä—É—Å–µ–ª—å –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
 * @version 2.0.1 - FIXED
 * @dependencies ['_state', '_router']
 */

import BaseModule from './BaseModule.js';

export default class Stories extends BaseModule {
    constructor(app) {
        super(app);
        this.name = 'stories';
        this.version = '2.0.1-fixed';
        this.dependencies = ['_state', '_router'];
        
        this.meta = {
            title: 'Stories',
            icon: 'üí¨',
            description: '–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ Stories –∏ –º–æ–¥—É–ª—è–º–∏',
            navLabel: 'Stories',
            status: 'ready'
        };
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ä—É—Å–µ–ª–∏
        this.currentSlide = 0;
        this.totalSlides = 5;
        this.autoPlayInterval = null;
        this.autoPlayEnabled = false; // –û–¢–ö–õ–Æ–ß–ê–ï–ú –ê–í–¢–û–ü–†–û–ö–†–£–¢–ö–£!
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–Ω–µ–ª–∏
        this.isExpanded = false;
        this.isDragging = false;
        this.startY = 0;
        this.startTop = 380;
        this.currentTop = 380;
        this.expandedTop = 40;
        this.collapsedTop = 380;
        this.threshold = 230;
        
        // DOM —ç–ª–µ–º–µ–Ω—Ç—ã
        this.elements = {};
        
        // –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–≤–æ–π–Ω–æ–≥–æ —Å–≤–∞–π–ø–∞
        this.isAnimating = false;
    }
    
    async init() {
        await super.init();
        this.initDOMElements();
        this.initHomeInterface();
    }
    
    initDOMElements() {
        this.elements = {
            homeContainer: document.getElementById('home-container'),
            mainHeader: document.getElementById('main-header'),
            mainContent: document.getElementById('content'),
            mainFooter: document.getElementById('main-footer'),
            homeHeader: document.getElementById('homeHeader'),
            storiesHero: document.getElementById('storiesHero'),
            storiesCarousel: document.getElementById('storiesCarousel'),
            carouselIndicators: document.getElementById('carouselIndicators'),
            mainContentPanel: document.getElementById('mainContent'),
            homeModules: document.getElementById('homeModules'),
            searchFab: document.getElementById('searchFab')
        };
    }
    
    async loadData() {
        // Stories —Å–ª–∞–π–¥—ã
        this.data = {
            slides: [
                {
                    id: 1,
                    title: 'TechCheck Pro',
                    subtitle: '–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏',
                    gradient: 'rainbow',
                    action: null
                },
                {
                    id: 2,
                    title: '–ù–æ–≤–æ—Å—Ç–∏',
                    subtitle: '–û–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã',
                    gradient: 'purple',
                    action: 'news'
                },
                {
                    id: 3,
                    title: '–°–æ–≤–µ—Ç –¥–Ω—è',
                    subtitle: '–ü–æ–ª–µ–∑–Ω—ã–µ –ª–∞–π—Ñ—Ö–∞–∫–∏',
                    gradient: 'pink',
                    action: 'tips'
                },
                {
                    id: 4,
                    title: '127',
                    subtitle: '–ü—Ä–æ–≤–µ—Ä–æ–∫ –∑–∞ –Ω–µ–¥–µ–ª—é',
                    gradient: 'blue',
                    action: 'stats'
                },
                {
                    id: 5,
                    title: '–ö–æ–º–∞–Ω–¥–∞',
                    subtitle: '–õ—É—á—à–∏–µ –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–µ',
                    gradient: 'green',
                    action: 'team'
                }
            ]
        };
        
        this.setCache(this.data);
    }
    
    initHomeInterface() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ –≥–ª–∞–≤–Ω–æ–π
        if (window.location.hash !== '' && window.location.hash !== '#/') {
            return;
        }
        
        this.renderStoriesSlides();
        this.renderIndicators();
        this.renderHomeModules();
        this.initCarouselEvents();
        this.initPanelDragging();
        this.initSearchButton();
        // –ù–ï –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫—É!
        // this.startAutoPlay(); // –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û
    }
    
    renderStoriesSlides() {
        if (!this.elements.storiesCarousel) return;
        
        this.elements.storiesCarousel.innerHTML = this.data.slides.map((slide, index) => `
            <div class="story-slide story-gradient-${slide.gradient}" 
                 onclick="app.getModule('stories').openStory(${index})">
                <h1 class="story-title">${slide.title}</h1>
                <p class="story-subtitle">${slide.subtitle}</p>
            </div>
        `).join('');
    }
    
    renderIndicators() {
        if (!this.elements.carouselIndicators) return;
        
        this.elements.carouselIndicators.innerHTML = this.data.slides.map((_, index) => `
            <button class="carousel-indicator ${index === 0 ? 'active' : ''}" 
                    onclick="app.getModule('stories').goToSlide(${index})"></button>
        `).join('');
    }
    
    renderHomeModules() {
        if (!this.elements.homeModules) return;
        
        const modules = [
            { id: 'knowledge-base', icon: 'üìö', title: '–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π', desc: '–ì–û–°–¢ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã' },
            { id: 'checklist', icon: '‚úì', title: '–ß–µ–∫-–ª–∏—Å—Ç—ã', desc: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤' },
            { id: 'documents', icon: 'üìã', title: '–î–æ–∫—É–º–µ–Ω—Ç—ã', desc: '–°–æ—Å—Ç–∞–≤ –ö–ë' },
            { id: 'wiki', icon: 'üìñ', title: 'Wiki', desc: '–ë–∞–∑–∞ –∫–æ–º–∞–Ω–¥—ã', status: 'beta' }
        ];
        
        const futureModules = [
            { icon: 'üìä', title: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', desc: '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫', date: 'Q2 2025' },
            { icon: 'ü§ñ', title: 'AI –ü—Ä–æ–≤–µ—Ä–∫–∞', desc: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑', date: 'Q3 2025' }
        ];
        
        this.elements.homeModules.innerHTML = `
            <!-- –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ -->
            <div class="home-modules">
                <div class="grid grid-2">
                    ${modules.map(module => `
                        <div class="module-card" onclick="window.location.hash = '/${module.id}'">
                            ${module.status ? `<span class="module-status status-${module.status}">Beta</span>` : ''}
                            <div class="module-header">
                                <div class="module-icon">${module.icon}</div>
                                <div class="module-info">
                                    <h3>${module.title}</h3>
                                    <p>${module.desc}</p>
                                </div>
                            </div>
                        </div>
                    `).join('')}
                </div>
            </div>
            
            <!-- –ë—É–¥—É—â–∏–µ –º–æ–¥—É–ª–∏ -->
            <section class="future-section">
                <h2>–°–∫–æ—Ä–æ</h2>
                <div class="future-modules">
                    ${futureModules.map(module => `
                        <div class="future-card">
                            <span class="future-badge">${module.date}</span>
                            <div class="future-icon">${module.icon}</div>
                            <div class="future-title">${module.title}</div>
                            <div class="future-desc">${module.desc}</div>
                        </div>
                    `).join('')}
                </div>
            </section>
        `;
    }
    
    initCarouselEvents() {
        if (!this.elements.storiesHero) return;
        
        let touchStartX = 0;
        let touchStartY = 0;
        let touchEndX = 0;
        let touchEndY = 0;
        
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        const newHero = this.elements.storiesHero.cloneNode(true);
        this.elements.storiesHero.parentNode.replaceChild(newHero, this.elements.storiesHero);
        this.elements.storiesHero = newHero;
        
        this.elements.storiesHero.addEventListener('touchstart', (e) => {
            touchStartX = e.touches[0].clientX;
            touchStartY = e.touches[0].clientY;
        }, { passive: true });
        
        this.elements.storiesHero.addEventListener('touchend', (e) => {
            touchEndX = e.changedTouches[0].clientX;
            touchEndY = e.changedTouches[0].clientY;
            
            const diffX = touchStartX - touchEndX;
            const diffY = Math.abs(touchStartY - touchEndY);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Å–≤–∞–π–ø
            if (Math.abs(diffX) > diffY && Math.abs(diffX) > 50) {
                this.handleSwipe(diffX);
            }
        }, { passive: true });
    }
    
    handleSwipe(diff) {
        // –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–≤–æ–π–Ω–æ–≥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
        if (this.isAnimating) return;
        
        if (diff > 0) {
            this.nextSlide();
        } else {
            this.prevSlide();
        }
    }
    
    initPanelDragging() {
        const panel = this.elements.mainContentPanel;
        if (!panel) return;
        
        // Touch —Å–æ–±—ã—Ç–∏—è
        panel.addEventListener('touchstart', (e) => this.startDrag(e), { passive: false });
        document.addEventListener('touchmove', (e) => this.drag(e), { passive: false });
        document.addEventListener('touchend', (e) => this.endDrag(e), { passive: true });
        
        // Mouse —Å–æ–±—ã—Ç–∏—è (–¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞)
        panel.addEventListener('mousedown', (e) => this.startDrag(e));
        document.addEventListener('mousemove', (e) => this.drag(e));
        document.addEventListener('mouseup', (e) => this.endDrag(e));
        
        // –ö–ª–∏–∫ –Ω–∞ —Ö–µ–¥–µ—Ä "–î–æ–º–æ–π"
        if (this.elements.homeHeader) {
            this.elements.homeHeader.addEventListener('click', () => {
                this.collapsePanel();
            });
        }
        
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–∏
        panel.addEventListener('selectstart', (e) => {
            if (this.isDragging) e.preventDefault();
        });
    }
    
    startDrag(e) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ –∫–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        if (e.target.closest('.module-card, .future-card, .search-fab, button')) {
            return;
        }
        
        this.isDragging = true;
        this.startY = e.type === 'touchstart' ? e.touches[0].clientY : e.clientY;
        this.startTop = this.currentTop;
        this.elements.mainContentPanel.classList.add('is-dragging');
    }
    
    drag(e) {
        if (!this.isDragging) return;
        
        e.preventDefault();
        const clientY = e.type === 'touchmove' ? e.touches[0].clientY : e.clientY;
        const deltaY = clientY - this.startY;
        let newTop = this.startTop + deltaY;
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ
        newTop = Math.max(this.expandedTop, Math.min(this.collapsedTop, newTop));
        
        this.elements.mainContentPanel.style.top = newTop + 'px';
        this.currentTop = newTop;
    }
    
    endDrag(e) {
        if (!this.isDragging) return;
        
        this.isDragging = false;
        this.elements.mainContentPanel.classList.remove('is-dragging');
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
        if (this.currentTop < this.threshold) {
            this.expandPanel();
        } else {
            this.collapsePanel();
        }
    }
    
    expandPanel() {
        this.isExpanded = true;
        this.currentTop = this.expandedTop;
        this.elements.mainContentPanel.classList.add('is-expanded');
        this.elements.storiesHero.classList.add('is-hidden');
        this.elements.homeHeader.classList.add('is-visible');
        this.elements.mainContentPanel.style.top = this.currentTop + 'px';
        this.stopAutoPlay();
    }
    
    collapsePanel() {
        this.isExpanded = false;
        this.currentTop = this.collapsedTop;
        this.elements.mainContentPanel.classList.remove('is-expanded');
        this.elements.storiesHero.classList.remove('is-hidden');
        this.elements.homeHeader.classList.remove('is-visible');
        this.elements.mainContentPanel.style.top = this.currentTop + 'px';
        // –ù–ï –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫—É –ø—Ä–∏ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–∏!
        // this.startAutoPlay(); // –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û
    }
    
    initSearchButton() {
        if (!this.elements.searchFab) return;
        
        this.elements.searchFab.addEventListener('click', () => {
            this.openSearch();
        });
    }
    
    goToSlide(index) {
        // –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–≤–æ–π–Ω–æ–≥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
        if (this.isAnimating) return;
        
        this.isAnimating = true;
        this.currentSlide = index;
        
        if (this.elements.storiesCarousel) {
            this.elements.storiesCarousel.style.transform = `translateX(-${index * 100}%)`;
        }
        
        const indicators = this.elements.carouselIndicators?.querySelectorAll('.carousel-indicator');
        if (indicators) {
            indicators.forEach((ind, i) => {
                ind.classList.toggle('active', i === index);
            });
        }
        
        // –°–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
        setTimeout(() => {
            this.isAnimating = false;
        }, 300);
    }
    
    nextSlide() {
        if (this.isAnimating) return;
        this.currentSlide = (this.currentSlide + 1) % this.totalSlides;
        this.goToSlide(this.currentSlide);
    }
    
    prevSlide() {
        if (this.isAnimating) return;
        this.currentSlide = (this.currentSlide - 1 + this.totalSlides) % this.totalSlides;
        this.goToSlide(this.currentSlide);
    }
    
    startAutoPlay() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥
        if (!this.autoPlayEnabled) return;
        
        this.stopAutoPlay();
        this.autoPlayInterval = setInterval(() => {
            this.nextSlide();
        }, 5000);
    }
    
    stopAutoPlay() {
        if (this.autoPlayInterval) {
            clearInterval(this.autoPlayInterval);
            this.autoPlayInterval = null;
        }
    }
    
    openStory(index) {
        const slide = this.data.slides[index];
        this.log(`Opening story: ${slide.title}`);
        
        if (slide.action) {
            switch(slide.action) {
                case 'news':
                    this.showNews();
                    break;
                case 'tips':
                    this.showTips();
                    break;
                case 'stats':
                    this.app.router.navigate('/statistics');
                    break;
                case 'team':
                    this.showTeam();
                    break;
            }
        }
    }
    
    openSearch() {
        this.log('Opening search');
        alert('–§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏');
    }
    
    showNews() {
        alert('–ù–æ–≤–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏');
    }
    
    showTips() {
        alert('–°–æ–≤–µ—Ç—ã –∏ –ª–∞–π—Ñ—Ö–∞–∫–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏');
    }
    
    showTeam() {
        alert('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∞–Ω–¥–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏');
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    showHomePage() {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≥–ª–∞–≤–Ω–æ–π
        this.elements.homeContainer.classList.remove('hidden');
        // –°–∫—Ä—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω–æ–µ
        this.elements.mainHeader.classList.add('hidden');
        this.elements.mainContent.classList.add('hidden');
        this.elements.mainFooter.classList.add('hidden');
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        this.initHomeInterface();
    }
    
    // –°–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    hideHomePage() {
        // –°–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≥–ª–∞–≤–Ω–æ–π
        this.elements.homeContainer.classList.add('hidden');
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω–æ–µ
        this.elements.mainHeader.classList.remove('hidden');
        this.elements.mainContent.classList.remove('hidden');
        this.elements.mainFooter.classList.remove('hidden');
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫—É
        this.stopAutoPlay();
    }
    
    getPublicMethods() {
        return {
            goToSlide: (index) => this.goToSlide(index),
            openStory: (index) => this.openStory(index),
            showHomePage: () => this.showHomePage(),
            hideHomePage: () => this.hideHomePage(),
            expandPanel: () => this.expandPanel(),
            collapsePanel: () => this.collapsePanel()
        };
    }
}
