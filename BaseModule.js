/**
 * @module BaseModule
 * @description –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π —Å–∏—Å—Ç–µ–º—ã
 * @version 1.0.0
 */

export default class BaseModule {
    constructor(app) {
        this.app = app;
        this.name = 'base-module';
        this.version = '1.0.0';
        this.dependencies = [];
        this.routes = [];
        this.initialized = false;
        this.api = {};
        
        // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª—è
        this.meta = {
            title: 'Base Module',
            icon: 'üì¶',
            description: '–ë–∞–∑–æ–≤—ã–π –º–æ–¥—É–ª—å',
            navLabel: 'Module',
            status: 'ready' // ready | beta | soon | hidden
        };
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è
     * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
     */
    async init() {
        this.log('Initializing...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        if (!this.checkDependencies()) {
            throw new Error(`Missing dependencies for ${this.name}`);
        }
        
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
        this.registerRoutes();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        await this.loadData();
        
        // –°–æ–∑–¥–∞—ë–º API
        this.createAPI();
        
        this.initialized = true;
        this.log('Initialized successfully');
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
     */
    checkDependencies() {
        for (const dep of this.dependencies) {
            if (!this.app.getModule(dep)) {
                this.log(`Missing dependency: ${dep}`, 'error');
                return false;
            }
        }
        return true;
    }
    
    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ –º–æ–¥—É–ª—è
     */
    registerRoutes() {
        const router = this.app.router;
        if (!router) return;
        
        // –û—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç –º–æ–¥—É–ª—è
        router.add(`/${this.name}`, () => this.render());
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
        this.routes.forEach(route => {
            router.add(route.path, route.handler.bind(this));
        });
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–æ–¥—É–ª—è
     */
    async loadData() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage
        const cached = this.getCache();
        if (cached) {
            this.data = cached;
            this.log('Data loaded from cache');
            return;
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ JSON
        try {
            const response = await fetch(`data/${this.name}.json`);
            if (response.ok) {
                this.data = await response.json();
                this.setCache(this.data);
                this.log('Data loaded from file');
            }
        } catch (error) {
            this.log('No data file found, using defaults', 'warning');
            this.data = this.getDefaultData();
        }
    }
    
    /**
     * –î–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
     */
    getDefaultData() {
        return {};
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ API –º–æ–¥—É–ª—è
     */
    createAPI() {
        this.api = {
            getName: () => this.name,
            getVersion: () => this.version,
            getMeta: () => this.meta,
            getData: () => this.data,
            render: () => this.render(),
            // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥—ã —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –º–æ–¥—É–ª—è
            ...this.getPublicMethods()
        };
    }
    
    /**
     * –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –º–æ–¥—É–ª—è (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö)
     */
    getPublicMethods() {
        return {};
    }
    
    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
     */
    render() {
        return `
            <div class="module-container" data-module="${this.name}">
                ${this.renderHeader()}
                ${this.renderContent()}
                ${this.renderFooter()}
            </div>
        `;
    }
    
    /**
     * –†–µ–Ω–¥–µ—Ä –∑–∞–≥–æ–ª–æ–≤–∫–∞ –º–æ–¥—É–ª—è
     */
    renderHeader() {
        return `
            <div class="module-header">
                <h1>
                    <span class="module-icon">${this.meta.icon}</span>
                    ${this.meta.title}
                </h1>
                <p class="module-description">${this.meta.description}</p>
            </div>
        `;
    }
    
    /**
     * –†–µ–Ω–¥–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö)
     */
    renderContent() {
        return `
            <div class="module-content">
                <p>Override renderContent() in your module</p>
            </div>
        `;
    }
    
    /**
     * –†–µ–Ω–¥–µ—Ä —Ñ—É—Ç–µ—Ä–∞ –º–æ–¥—É–ª—è
     */
    renderFooter() {
        return `
            <div class="module-footer">
                <small>Module: ${this.name} v${this.version}</small>
            </div>
        `;
    }
    
    /**
     * –†–∞–±–æ—Ç–∞ —Å –∫—ç—à–µ–º
     */
    getCache(key = null) {
        const cacheKey = `techcheck_${this.name}`;
        try {
            const cached = localStorage.getItem(cacheKey);
            if (!cached) return null;
            
            const data = JSON.parse(cached);
            return key ? data[key] : data;
        } catch (error) {
            this.log('Cache read error', 'error');
            return null;
        }
    }
    
    setCache(data, key = null) {
        const cacheKey = `techcheck_${this.name}`;
        try {
            if (key) {
                const existing = this.getCache() || {};
                existing[key] = data;
                localStorage.setItem(cacheKey, JSON.stringify(existing));
            } else {
                localStorage.setItem(cacheKey, JSON.stringify(data));
            }
            return true;
        } catch (error) {
            this.log('Cache write error', 'error');
            return false;
        }
    }
    
    clearCache() {
        const cacheKey = `techcheck_${this.name}`;
        localStorage.removeItem(cacheKey);
        this.log('Cache cleared');
    }
    
    /**
     * –£—Ç–∏–ª–∏—Ç—ã
     */
    log(message, type = 'info') {
        this.app.log(`[${this.name}] ${message}`, type);
    }
    
    emit(event, data = {}) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—É—é —à–∏–Ω—É
        window.dispatchEvent(new CustomEvent(`module:${event}`, {
            detail: { module: this.name, ...data }
        }));
    }
    
    on(event, handler) {
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
        window.addEventListener(`module:${event}`, handler);
    }
    
    off(event, handler) {
        // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏–π
        window.removeEventListener(`module:${event}`, handler);
    }
    
    /**
     * –•–µ–ª–ø–µ—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å DOM
     */
    $(selector) {
        return document.querySelector(selector);
    }
    
    $$(selector) {
        return document.querySelectorAll(selector);
    }
    
    createElement(html) {
        const div = document.createElement('div');
        div.innerHTML = html.trim();
        return div.firstChild;
    }
    
    /**
     * –ú–µ—Ç–æ–¥—ã –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
     */
    async beforeInit() {
        // –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
    }
    
    async afterInit() {
        // –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    }
    
    async beforeDestroy() {
        // –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–µ—Ä–µ–¥ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ–º
    }
    
    destroy() {
        this.beforeDestroy();
        this.clearCache();
        this.initialized = false;
        this.log('Module destroyed');
    }
}

/**
 * ============================================
 * –ü–†–ò–ú–ï–† –°–û–ó–î–ê–ù–ò–Ø –ù–û–í–û–ì–û –ú–û–î–£–õ–Ø
 * ============================================
 * 
 * import BaseModule from './BaseModule.js';
 * 
 * export default class MyModule extends BaseModule {
 *     constructor(app) {
 *         super(app);
 *         this.name = 'my-module';
 *         this.version = '1.0.0';
 *         this.dependencies = ['_state', '_router'];
 *         
 *         this.meta = {
 *             title: '–ú–æ–π –ú–æ–¥—É–ª—å',
 *             icon: 'üöÄ',
 *             description: '–û–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥—É–ª—è',
 *             navLabel: '–ú–æ–π –º–æ–¥—É–ª—å',
 *             status: 'ready'
 *         };
 *     }
 *     
 *     renderContent() {
 *         return `
 *             <div>
 *                 <h2>–ö–æ–Ω—Ç–µ–Ω—Ç –º–æ–µ–≥–æ –º–æ–¥—É–ª—è</h2>
 *             </div>
 *         `;
 *     }
 *     
 *     getPublicMethods() {
 *         return {
 *             doSomething: () => this.doSomething()
 *         };
 *     }
 * }
 */